(()=>{"use strict";window.addEventListener("load",(()=>{document.getElementById("preloader").classList.add("hidden")})),document.addEventListener("DOMContentLoaded",(()=>{let expression="0";const display=document.getElementById("display"),buttons=document.querySelectorAll(".buttons button");function updateDisplay(){display.textContent=expression||"0"}function canAddDigitOrDot(e,t){return"."===t?!e.split(/[\+\-\*\/]/).pop().includes("."):("0"===e&&/\d/.test(t),!0)}function computeResult(expr){try{let sanitizedExpr=expr.replace(/รท/g,"/").replace(/ร/g,"*");if(!/^[0-9+\-*/.\s]+$/.test(sanitizedExpr))throw new Error("Invalid expression");const result=eval(sanitizedExpr);return isFinite(result)?Number(result).toFixed(8).replace(/\.?0+$/,""):"Error"}catch(e){return console.error("Calculation error:",e),"Error"}}function handleOperation(e,t){try{if("percent"===e){const e=t.split(/[\+\-\*\/]/).pop();return t.slice(0,-e.length)+Number(e)/100}return t}catch(e){return console.error("Operation error:",e),"Error"}}display&&buttons.length?(buttons.forEach((e=>{e.addEventListener("click",(e=>{const t=e.currentTarget.dataset.value,r=e.currentTarget.dataset.action;if("clear"===r)return expression="0",void updateDisplay();if("="===t){const e=computeResult(expression);return expression=e,void updateDisplay()}if("percent"===r)return expression=handleOperation(r,expression),void updateDisplay();/\d/.test(t)||"."===t?canAddDigitOrDot(expression,t)&&("0"===expression&&"."!==t?expression=t:expression+=t,updateDisplay()):["+","-","*","/"].includes(t)&&expression&&!/[+\-*/]$/.test(expression)&&(expression+=t,updateDisplay())}))})),document.addEventListener("keydown",(e=>{const t=e.key,r={Enter:"=",Escape:"clear","/":"/","*":"*","+":"+","-":"-",".":".","%":"percent"};if(/\d/.test(t))document.querySelector(`[data-value="${t}"]`)?.click();else if(r[t]){const e=r[t].startsWith("percent")?`[data-action="${r[t]}"]`:`[data-value="${r[t]}"],[data-action="${r[t]}"]`;document.querySelector(e)?.click()}})),updateDisplay()):console.error("Required DOM elements not found")}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,